start =
    expression

validchar
    = [0-9a-zA-Z_?!+\-=@#$%^&*/.<>]

integer =
    "0"
        { return 0; }
  / first:[1-9] rest:[0-9]*
       { return parseInt(first + rest.join(""), 10); }

float =
    start:[0-9]+ "." rest:[0-9]+
       { return parseFloat(start.join("") + "." + rest.join("")); }

atom =
     whitespace* s:string whitespace*
        {return s;}
  /  whitespace* i:integer whitespace*
        {return i; }
  /  whitespace* chars:validchar+ whitespace*
        { return chars.join(""); }

comment = 
    [\t ]* ";;" [^\n]* "\n"
        {return "!COMM!";}
  / [\t ]* ";" [^\n]* "\n"
        {return '!COMM!';}

dblquotcontent = 
      [^"]

singlequotcontent = 
      [^']

string = 
     '"' chars:dblquotcontent* '"'
        {return ['quote', chars.join("")];}

whitespace =
    comment
  / [\n\t ]+
        { return "!WS!"}
    
lparen = 
    "("
  / "(" whitespace*
  
rparen = 
    ")"
  / whitespace* ")"
  
lexpr =
    atom
  / list
  / quote
  / " " l:list
      { return l}
  / " " a:atom
      { return a }
      
list = 
     whitespace* lparen whitespace* rparen whitespace* 
       { return []; }
   / whitespace* lparen exprs:lexpr* rparen whitespace* 
       { return exprs }
       
expression =
    atom
  / quote
  / list

quote = 
    "'" exp:expression
        {return ["quote",  exp];}
